generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model users {
  id               Int              @id @default(autoincrement())
  profilePhoto     profilePhoto     @default(MALE)
  email            String           @unique
  password         String
  bio              String?
  firstName        String
  lastName         String
  username         String
  registationDate  DateTime         @default(now())
  firstLogin       Boolean          @default(true)
  profilePhotoUrl  String?
  isAdmin          Boolean          @default(false)
  isForumMod       Boolean          @default(false)
  points           Int              @default(0)
  resetToken       String?
  resetTokenExpiry DateTime?
  AgendaUser       AgendaUser[]
  BugUser          BugUser[]
  Forum            Forum[]
  posts            Post[]
  PostUpvote       PostUpvote[]
  QuizUser         QuizUser[]
  reactions        Reaction[]
  ReportedPost     ReportedPost[]
  StoreItemsUser   StoreItemsUser[]
  upvotes          Upvote[]
}

model educatie_modules {
  id          Int     @unique @default(autoincrement())
  title       String?
  description String?
}

model casus {
  id          Int     @unique @default(autoincrement())
  name        String?
  description String?
  url         String?
  treatment   String?
}

model Post {
  id           Int            @id @default(autoincrement())
  title        String
  content      String
  userId       Int
  date         DateTime       @default(now())
  Forum        Forum[]
  user         users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostUpvote   PostUpvote[]
  Reaction     Reaction[]
  ReactionPost ReactionPost[]
  ReportedPost ReportedPost[]
  upvotes      Upvote[]
}

model Reaction {
  id           Int            @id @default(autoincrement())
  date         DateTime       @default(now())
  content      String
  postId       Int
  userId       Int
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ReactionPost ReactionPost[]
  Upvote       Upvote[]
}

model Upvote {
  userId     Int
  reactionId Int
  postId     Int?
  Post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  reaction   Reaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, reactionId])
}

model Event {
  id          Int          @id @default(autoincrement())
  date        DateTime
  name        String
  description String?
  AgendaUser  AgendaUser[]
}

model Bug {
  id          Int       @id @default(autoincrement())
  date        DateTime
  title       String
  description String?
  BugUser     BugUser[]
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  questions Json
  points    Int
  QuizUser  QuizUser[]
}

model QuizUser {
  id           Int     @id @default(autoincrement())
  userId       Int
  quizId       Int
  isCompleted  Boolean
  pointsScored Int
  quiz         Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user         users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Forum {
  id     Int   @id @default(autoincrement())
  userId Int
  postId Int
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReactionPost {
  id         Int      @id @default(autoincrement())
  reactionId Int
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  reaction   Reaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
}

model ReportedPost {
  postId     Int
  reportedBy Int
  reason     String
  date       DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [reportedBy], references: [id], onDelete: Cascade)

  @@id([postId, reportedBy])
}

model AgendaUser {
  id      Int   @id @default(autoincrement())
  eventId Int
  userId  Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BugUser {
  id     Int   @id @default(autoincrement())
  bugId  Int
  userId Int
  bug    Bug   @relation(fields: [bugId], references: [id], onDelete: Cascade)
  user   users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostUpvote {
  postId Int
  userId Int
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model newsArticles {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  url     String
}

model storeItems {
  id             Int              @id @default(autoincrement())
  title          String
  genre          String
  price          Int
  details        String
  storeItemsUser StoreItemsUser[]
}

model StoreItemsUser {
  id          Int        @id @default(autoincrement())
  storeItemId Int
  userId      Int
  storeItem   storeItems @relation(fields: [storeItemId], references: [id], onDelete: Cascade)
  user        users      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum profilePhoto {
  MALE
  FEMALE
}
