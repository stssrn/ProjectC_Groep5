// learn more about prisma: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model users {
  id               Int          @id @default(autoincrement())
  profilePhotoUrl  String?
  profilePhoto     profilePhoto @default(MALE)
  email            String       @unique
  password         String
  bio              String?
  firstName        String
  lastName         String
  username         String
  registationDate  DateTime     @default(now())
  firstLogin       Boolean      @default(true)
  points           Int          @default(0)
  isAdmin          Boolean      @default(false)
  isForumMod       Boolean      @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?

  posts          Post[]
  reactions      Reaction[]
  upvotes        Upvote[]
  QuizUser       QuizUser[]
  Forum          Forum[]
  AgendaUser     AgendaUser[]
  BugUser        BugUser[]
  PostUpvote     PostUpvote[]
  StoreItemsUser StoreItemsUser[]
}

model educatie_modules {
  id          Int     @unique @default(autoincrement())
  title       String?
  description String?
}

model casus {
  id          Int     @unique @default(autoincrement())
  name        String?
  description String?
  treatment   String?
  url         String?
}

model Post {
  id      Int      @id @default(autoincrement())
  title   String
  content String
  userId  Int
  upvotes Upvote[]

  user         users          @relation(fields: [userId], references: [id])
  Reaction     Reaction[]
  Forum        Forum[]
  ReactionPost ReactionPost[]
  PostUpvote   PostUpvote[]
}

model Reaction {
  id      Int      @id @default(autoincrement())
  date    DateTime
  content String
  postId  Int
  userId  Int

  post         Post           @relation(fields: [postId], references: [id])
  user         users          @relation(fields: [userId], references: [id])
  Upvote       Upvote[]
  ReactionPost ReactionPost[]
}

model Upvote {
  userId     Int
  reactionId Int

  user     users    @relation(fields: [userId], references: [id])
  reaction Reaction @relation(fields: [reactionId], references: [id])
  Post     Post?    @relation(fields: [postId], references: [id])
  postId   Int?

  @@id([userId, reactionId])
}

model Event {
  id          Int      @id @default(autoincrement())
  date        DateTime
  name        String
  description String?

  // Relationships
  AgendaUser AgendaUser[]
}

model Bug {
  id          Int      @id @default(autoincrement())
  date        DateTime
  title       String
  description String?

  // Relationships
  BugUser BugUser[]
}

model Quiz {
  id        Int    @id @default(autoincrement())
  title     String
  questions Json
  points    Int

  // Relationships
  QuizUser QuizUser[]
}

model QuizUser {
  id Int @id @default(autoincrement())

  userId       Int
  quizId       Int
  isCompleted  Boolean
  pointsScored Int

  user users @relation(fields: [userId], references: [id])
  quiz Quiz  @relation(fields: [quizId], references: [id])
}

model Forum {
  id     Int @id @default(autoincrement())
  userId Int
  postId Int

  user users @relation(fields: [userId], references: [id])
  post Post  @relation(fields: [postId], references: [id])
}

model ReactionPost {
  id Int @id @default(autoincrement())

  reactionId Int
  postId     Int

  reaction Reaction @relation(fields: [reactionId], references: [id])
  post     Post     @relation(fields: [postId], references: [id])
}

model AgendaUser {
  id Int @id @default(autoincrement())

  eventId Int
  userId  Int

  event Event @relation(fields: [eventId], references: [id])
  user  users @relation(fields: [userId], references: [id])
}

model BugUser {
  id Int @id @default(autoincrement())

  bugId  Int
  userId Int

  bug  Bug   @relation(fields: [bugId], references: [id])
  user users @relation(fields: [userId], references: [id])
}

model PostUpvote {
  postId Int
  userId Int

  post Post  @relation(fields: [postId], references: [id])
  user users @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model newsArticles {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  url     String
}

model storeItems {
  id      Int    @id @default(autoincrement())
  title   String
  genre   String
  price   Int
  details String

  // Relationships
  storeItemsUser StoreItemsUser[]
}

model StoreItemsUser {
  id Int @id @default(autoincrement())

  storeItemId Int
  userId      Int

  storeItem storeItems @relation(fields: [storeItemId], references: [id])
  user      users      @relation(fields: [userId], references: [id])
}

enum profilePhoto {
  MALE
  FEMALE
}
